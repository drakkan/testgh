name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-deploy:
    name: Test and deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: [1.17]
        os: [windows-latest]
        upload-coverage: [false]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Build for Linux/macOS x86_64
        if: startsWith(matrix.os, 'windows-') != true
        run: |
          go build -trimpath -ldflags "-s -w -X github.com/drakkan/sftpgo/v2/version.commit=`git describe --always --dirty` -X github.com/drakkan/sftpgo/v2/version.date=`date -u +%FT%TZ`" -o sftpgo
          cd tests/eventsearcher
          go mod tidy
          go build -trimpath -ldflags "-s -w" -o eventsearcher
          cd -

      - name: Build for macOS arm64
        if: startsWith(matrix.os, 'macos-') == true
        run: CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 SDKROOT=$(xcrun --sdk macosx --show-sdk-path) go build -trimpath -ldflags "-s -w -X github.com/drakkan/sftpgo/v2/version.commit=`git describe --always --dirty` -X github.com/drakkan/sftpgo/v2/version.date=`date -u +%FT%TZ`" -o sftpgo_arm64

      - name: Build for Windows
        if: startsWith(matrix.os, 'windows-')
        run: |
          $GIT_COMMIT = (git describe --always --dirty) | Out-String
          $DATE_TIME = ([datetime]::Now.ToUniversalTime().toString("yyyy-MM-ddTHH:mm:ssZ")) | Out-String
          $LATEST_TAG = ((git describe --tags $(git rev-list --tags --max-count=1)) | Out-String).Trim()
          $REV_LIST=$LATEST_TAG+"..HEAD"
          $COMMITS_FROM_TAG= ((git rev-list $REV_LIST --count) | Out-String).Trim()
          $FILE_VERSION = $LATEST_TAG.substring(1)  + "." + $COMMITS_FROM_TAG
          go install github.com/tc-hib/go-winres@latest
          go-winres simply --arch amd64 --product-version $LATEST_TAG-dev-$GIT_COMMIT --file-version $FILE_VERSION --file-description "SFTPGo server" --product-name SFTPGo --copyright "AGPL-3.0" --original-filename sftpgo.exe --icon  .\windows-installer\icon.ico
          go build -trimpath -ldflags "-s -w -X github.com/drakkan/sftpgo/v2/version.commit=$GIT_COMMIT -X github.com/drakkan/sftpgo/v2/version.date=$DATE_TIME" -o sftpgo.exe
          cd tests/eventsearcher
          go mod tidy
          go build -trimpath -ldflags "-s -w" -o eventsearcher.exe
          cd ../..
          .\sftpgo.exe initprovider
          mkdir arm64
          $Env:CGO_ENABLED='0'
          $Env:GOOS='windows'
          $Env:GOARCH='arm64'
          go-winres simply --arch arm64 --product-version $LATEST_TAG-dev-$GIT_COMMIT --file-version $FILE_VERSION --file-description "SFTPGo server" --product-name SFTPGo --copyright "AGPL-3.0" --original-filename sftpgo.exe --icon  .\windows-installer\icon.ico
          go build -trimpath -ldflags "-s -w -X github.com/drakkan/sftpgo/v2/version.commit=$GIT_COMMIT -X github.com/drakkan/sftpgo/v2/version.date=$DATE_TIME" -o .\arm64\sftpgo.exe
          mkdir x86
          $Env:GOARCH='386'
          go-winres simply --arch 386 --product-version $LATEST_TAG-dev-$GIT_COMMIT --file-version $FILE_VERSION --file-description "SFTPGo server" --product-name SFTPGo --copyright "AGPL-3.0" --original-filename sftpgo.exe --icon  .\windows-installer\icon.ico
          go build -trimpath -ldflags "-s -w -X github.com/drakkan/sftpgo/v2/version.commit=$GIT_COMMIT -X github.com/drakkan/sftpgo/v2/version.date=$DATE_TIME" -o .\x86\sftpgo.exe
          Remove-Item Env:\CGO_ENABLED
          Remove-Item Env:\GOOS
          Remove-Item Env:\GOARCH

      - name: Prepare build artifact for macOS
        if: startsWith(matrix.os, 'macos-') == true
        run: |
          mkdir -p output/{init,bash_completion,zsh_completion}
          cp sftpgo output/sftpgo_x86_64
          cp sftpgo_arm64 output/
          cp sftpgo.json output/
          cp -r templates output/
          cp -r static output/
          cp -r openapi output/
          cp init/com.github.drakkan.sftpgo.plist output/init/
          ./sftpgo gen completion bash > output/bash_completion/sftpgo
          ./sftpgo gen completion zsh > output/zsh_completion/_sftpgo
          ./sftpgo gen man -d output/man/man1
          gzip output/man/man1/*

      - name: Prepare Windows installer
        if: ${{ startsWith(matrix.os, 'windows-') && github.event_name != 'pull_request' }}
        run: |
          Remove-Item -LiteralPath "output" -Force -Recurse -ErrorAction Ignore
          mkdir output
          copy .\sftpgo.exe .\output
          copy .\sftpgo.json .\output
          copy .\sftpgo.db .\output
          copy .\LICENSE .\output\LICENSE.txt
          mkdir output\templates
          xcopy .\templates .\output\templates\ /E
          mkdir output\static
          xcopy .\static .\output\static\ /E
          mkdir output\openapi
          xcopy .\openapi .\output\openapi\ /E
          $LATEST_TAG = ((git describe --tags $(git rev-list --tags --max-count=1)) | Out-String).Trim()
          $REV_LIST=$LATEST_TAG+"..HEAD"
          $COMMITS_FROM_TAG= ((git rev-list $REV_LIST --count) | Out-String).Trim()
          $Env:SFTPGO_ISS_DEV_VERSION = $LATEST_TAG  + "." + $COMMITS_FROM_TAG
          $CERT_PATH=(Get-Location -PSProvider FileSystem).ProviderPath + "\cert.pfx"
          [IO.File]::WriteAllBytes($CERT_PATH,[System.Convert]::FromBase64String($Env:CERT_DATA))
          certutil -f -p "$Env:CERT_PASS" -importpfx MY "$CERT_PATH"
          rm "$CERT_PATH"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /sm /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /n "Nicola Murino" /d "SFTPGo" .\sftpgo.exe
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /sm /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /n "Nicola Murino" /d "SFTPGo" .\arm64\sftpgo.exe
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /sm /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /n "Nicola Murino" /d "SFTPGo" .\x86\sftpgo.exe
          $INNO_S='/Ssigntool=$qC:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe$q sign /sm /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /n $qNicola Murino$q /d $qSFTPGo$q $f'
          iscc "$INNO_S" .\windows-installer\sftpgo.iss

          rm .\output\sftpgo.exe
          rm .\output\sftpgo.db
          copy .\arm64\sftpgo.exe .\output
          (Get-Content .\output\sftpgo.json).replace('"sqlite"', '"bolt"') | Set-Content .\output\sftpgo.json
          $Env:SFTPGO_DATA_PROVIDER__DRIVER='bolt'
          $Env:SFTPGO_DATA_PROVIDER__NAME='.\output\sftpgo.db'
          .\sftpgo.exe initprovider
          Remove-Item Env:\SFTPGO_DATA_PROVIDER__DRIVER
          Remove-Item Env:\SFTPGO_DATA_PROVIDER__NAME
          $Env:SFTPGO_ISS_ARCH='arm64'
          iscc "$INNO_S" .\windows-installer\sftpgo.iss

          rm .\output\sftpgo.exe
          copy .\x86\sftpgo.exe .\output
          $Env:SFTPGO_ISS_ARCH='x86'
          iscc "$INNO_S" .\windows-installer\sftpgo.iss
          certutil -delstore MY "Nicola Murino"
        env:
          CERT_DATA: ${{ secrets.CERT_DATA }}
          CERT_PASS: ${{ secrets.CERT_PASS }}

      - name: Upload Windows installer x86_64 artifact
        if: ${{ startsWith(matrix.os, 'windows-') && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: sftpgo_windows_installer_x86_64
          path: ./sftpgo_windows_x86_64.exe

      - name: Upload Windows installer arm64 artifact
        if: ${{ startsWith(matrix.os, 'windows-') && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: sftpgo_windows_installer_arm64
          path: ./sftpgo_windows_arm64.exe

      - name: Upload Windows installer x86 artifact
        if: ${{ startsWith(matrix.os, 'windows-') && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: sftpgo_windows_installer_x86
          path: ./sftpgo_windows_x86.exe

      - name: Prepare build artifact for Windows
        if: startsWith(matrix.os, 'windows-')
        run: |
          Remove-Item -LiteralPath "output" -Force -Recurse -ErrorAction Ignore
          mkdir output
          copy .\sftpgo.exe .\output
          mkdir output\arm64
          copy .\arm64\sftpgo.exe .\output\arm64
          mkdir output\x86
          copy .\x86\sftpgo.exe .\output\x86
          copy .\sftpgo.json .\output
          (Get-Content .\output\sftpgo.json).replace('"sqlite"', '"bolt"') | Set-Content .\output\sftpgo.json
          mkdir output\templates
          xcopy .\templates .\output\templates\ /E
          mkdir output\static
          xcopy .\static .\output\static\ /E
          mkdir output\openapi
          xcopy .\openapi .\output\openapi\ /E

      - name: Upload build artifact
        if: startsWith(matrix.os, 'ubuntu-') != true
        uses: actions/upload-artifact@v2
        with:
          name: sftpgo-${{ matrix.os }}-go-${{ matrix.go }}
          path: output